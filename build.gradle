version 'V1.1'

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
//apply plugin: 'jacoco'
sourceCompatibility = 1.8
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}
//apply plugin: 'com.github.johnrengelman.shadow'
repositories {
    mavenCentral()
}
ext.jerseyVersion = '2.26'
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.jinq', name: 'jinq-jpa', version: '1.8.22'
    compile group: 'com.h2database', name: 'h2', version: '1.4.196'
    compile group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'
    compile group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.7.1'
    compile 'org.glassfish.jersey.core:jersey-server:'+jerseyVersion
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-moxy', version: jerseyVersion
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-processing', version: jerseyVersion
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: jerseyVersion
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-sse', version: jerseyVersion
    compile 'org.glassfish.jersey.core:jersey-client:'+jerseyVersion
    compile 'org.glassfish.jersey.core:jersey-common:'+jerseyVersion
    compile 'org.glassfish.jersey.inject:jersey-hk2:'+jerseyVersion
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:'+jerseyVersion
    compile 'org.glassfish.jersey.connectors:jersey-grizzly-connector:'+jerseyVersion
    compile 'com.google.code.gson:gson:2.7'
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
}
jar {
  manifest {
    attributes(
      'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
      'Main-Class': 'org.stacspics.Main'
    )
  }
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
    effort = "max"
    reportLevel = "high"
    excludeFilter = file("$rootDir/findbugs.xml")
}

checkstyle {
    toolVersion "7.6.1"
    configFile = new File(rootDir, 'checkstyle.xml')
}
//jacocoTestReport {
//    reports {
//        xml.enabled false
//        csv.enabled false
//	 html.destination file("${buildDir}/reports/coverage")
//    }
//}
//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            limit {
//                minimum = 0.8
//            }
//        }
//    }
//}
gradle.taskGraph.beforeTask { task ->
    if ( task.name == "checkstyleTest"
) {
        task.deleteAllActions()
    }
}
//check.dependsOn jacocoTestReport
//check.dependsOn jacocoTestCoverageVerification
build.dependsOn check
//build.dependsOn shadowJar
